/**
 * Higher order component with touching feature
 * @function withTouch
 * @param {function} Component - A component constructor
 * @returns {function} - Wrapped component
 */
'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _toConsumableArray2 = require('babel-runtime/helpers/toConsumableArray');

var _toConsumableArray3 = _interopRequireDefault(_toConsumableArray2);

var _assign = require('babel-runtime/core-js/object/assign');

var _assign2 = _interopRequireDefault(_assign);

var _getIterator2 = require('babel-runtime/core-js/get-iterator');

var _getIterator3 = _interopRequireDefault(_getIterator2);

var _keys = require('babel-runtime/core-js/object/keys');

var _keys2 = _interopRequireDefault(_keys);

var _breact = require('breact');

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

var _reactDom = require('react-dom');

var _reactDom2 = _interopRequireDefault(_reactDom);

var _asobj = require('asobj');

var _enums = require('./enums');

var _new_hammer = require('./helpers/new_hammer');

var _new_hammer2 = _interopRequireDefault(_new_hammer);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var propTypes = {
  /** Handler for "tap" event */
  onTap: _react.PropTypes.func,
  /** Handler for "doubletap" event */
  onDoubleTap: _react.PropTypes.func,
  /** Handler for "pan" event */
  onPan: _react.PropTypes.func,
  /** Handler for "panstart" event */
  onPanStart: _react.PropTypes.func,
  /** Handler for "panmove" event */
  onPanMove: _react.PropTypes.func,
  /** Handler for "panend" event */
  onPanEnd: _react.PropTypes.func,
  /** Handler for "pancancel" event */
  onPanCancel: _react.PropTypes.func,
  /** Handler for "swipe" event */
  onSwipe: _react.PropTypes.func,
  /** Handler for "press" event */
  onPress: _react.PropTypes.func,
  /** Handler for "pressup" event */
  onPressUp: _react.PropTypes.func,
  /** Handler for "pinch" event */
  onPinch: _react.PropTypes.func,
  /** Handler for "pinchstart" event */
  onPinchStart: _react.PropTypes.func,
  /** Handler for "pinchmove" event */
  onPinchMove: _react.PropTypes.func,
  /** Handler for "pinchend" event */
  onPinchEnd: _react.PropTypes.func,
  /** Handler for "pinchcancel" event */
  onPinchCancel: _react.PropTypes.func,
  /** Handler for "rotate" event */
  onRotate: _react.PropTypes.func,
  /** Handler for "rotatestart" event */
  onRotateStart: _react.PropTypes.func,
  /** Handler for "rotatemove" event */
  onRotateMove: _react.PropTypes.func,
  /** Handler for "rotateend" event */
  onRotateEnd: _react.PropTypes.func,
  /** Handler for "rotatecancel" event */
  onRotateCancel: _react.PropTypes.func,
  /** Options for touch */
  touchOptions: _react.PropTypes.object,
  /** Pixcel for pan threshold */
  panThreshold: _react.PropTypes.number,
  /** Direction for pan */
  panDirection: _react.PropTypes.oneOf(_enums.directions),
  /** Direction for swipe */
  swipeDirection: _react.PropTypes.oneOf(_enums.directions)
};

function createTouchHammer(node, props, getData) {
  if (!node) {
    return;
  }
  var hammer = (0, _new_hammer2.default)(node);
  if (props.touchOptions) {
    hammer.set(props.touchOptions);
  }
  (0, _keys2.default)(propTypes).filter(function (key) {
    return !!props[key];
  }).forEach(function (key) {
    if (/^on/.test(key)) {
      (function () {
        var event = key.replace(/^on/, '').toLowerCase();
        var handler = props[key];
        hammer.on(event, function (e) {
          e.data = getData(); // Set touching data.
          handler(e);
        });
      })();
    }
    if (/Direction$/.test(key)) {
      var gesture = key.replace(/Direction$/, '');
      hammer.get(gesture).set({ direction: hammer.Hammer['DIRECTION_' + props[key]] });
    }
    if (/Threshold$/.test(key)) {
      var threshold = key.replace(/Threshold$/, '');
      hammer.get(threshold).set({ threshold: props[key] });
    }
  });
  return hammer;
}

function destroyTouchHammer(hammer) {
  if (!hammer) {
    return;
  }
  hammer.stop();
  hammer.destroy();
}

function supportsTouch(props) {
  var touchableKey = (0, _keys2.default)(propTypes);
  var _iteratorNormalCompletion = true;
  var _didIteratorError = false;
  var _iteratorError = undefined;

  try {
    for (var _iterator = (0, _getIterator3.default)((0, _keys2.default)(props)), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {
      var key = _step.value;

      var hit = !!~touchableKey.indexOf(key);
      if (hit) {
        return true;
      }
    }
  } catch (err) {
    _didIteratorError = true;
    _iteratorError = err;
  } finally {
    try {
      if (!_iteratorNormalCompletion && _iterator.return) {
        _iterator.return();
      }
    } finally {
      if (_didIteratorError) {
        throw _iteratorError;
      }
    }
  }

  return false;
}

/** @lends withTouch */
function withTouch(Component) {
  var config = arguments.length <= 1 || arguments[1] === undefined ? {} : arguments[1];
  var getTouchData = config.getTouchData;

  var spec = (0, _assign2.default)({
    displayName: 'withTouch',

    propTypes: propTypes,

    render: function render() {
      var s = this;
      var props = s.props;

      var wrappedProps = (0, _asobj.clone)(props, {
        without: (0, _keys2.default)(propTypes || {})
      });
      wrappedProps.hasTouch = !!props.onTap;
      var children = _react2.default.Children.toArray(props.children);
      return _react2.default.createElement.apply(_react2.default, [Component, wrappedProps].concat((0, _toConsumableArray3.default)(children)));
    },
    componentDidMount: function componentDidMount() {
      var s = this;
      var touchable = supportsTouch(s.props);
      var getData = function getData() {
        return s.getTouchData ? s.getTouchData() : undefined;
      };
      if (touchable) {
        s.touchHammer = createTouchHammer(_reactDom2.default.findDOMNode(s), s.props, getData);
      }
    },
    componentWillUnmount: function componentWillUnmount() {
      var s = this;
      var hammer = s.touchHammer;
      if (hammer) {
        destroyTouchHammer(hammer);
      }
      delete s.touchHammer;
    }
  }, { getTouchData: getTouchData });
  return (0, _breact.wrap)(Component, spec);
}

exports.default = withTouch;
//# sourceMappingURL=data:application/json;base64,