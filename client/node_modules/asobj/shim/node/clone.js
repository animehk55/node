/**
 * Clone a object
 * @function clone
 * @param {Object} src - Source object to clone
 * @param {Object} [options={}] - Optional settings
 * @returns {Object} - Cloned object
 */
'use strict';

/** @lends clone */

var _getIterator2 = require('babel-runtime/core-js/get-iterator');

var _getIterator3 = _interopRequireDefault(_getIterator2);

var _assign = require('babel-runtime/core-js/object/assign');

var _assign2 = _interopRequireDefault(_assign);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function clone(src) {
  var options = arguments.length <= 1 || arguments[1] === undefined ? {} : arguments[1];

  var cloned = (0, _assign2.default)({}, src);

  var without = [].concat(options.without || []);
  var _iteratorNormalCompletion = true;
  var _didIteratorError = false;
  var _iteratorError = undefined;

  try {
    for (var _iterator = (0, _getIterator3.default)(without), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {
      var name = _step.value;

      delete cloned[name];
    }
  } catch (err) {
    _didIteratorError = true;
    _iteratorError = err;
  } finally {
    try {
      if (!_iteratorNormalCompletion && _iterator.return) {
        _iterator.return();
      }
    } finally {
      if (_didIteratorError) {
        throw _iteratorError;
      }
    }
  }

  return cloned;
}

module.exports = clone;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImNsb25lLmpzIl0sIm5hbWVzIjpbImNsb25lIiwic3JjIiwib3B0aW9ucyIsImNsb25lZCIsIndpdGhvdXQiLCJjb25jYXQiLCJuYW1lIiwibW9kdWxlIiwiZXhwb3J0cyJdLCJtYXBwaW5ncyI6IkFBQUE7Ozs7Ozs7QUFPQTs7QUFFQTs7Ozs7Ozs7Ozs7O0FBQ0EsU0FBU0EsS0FBVCxDQUFnQkMsR0FBaEIsRUFBbUM7QUFBQSxNQUFkQyxPQUFjLHlEQUFKLEVBQUk7O0FBQ2pDLE1BQUlDLFNBQVMsc0JBQWMsRUFBZCxFQUFrQkYsR0FBbEIsQ0FBYjs7QUFFQSxNQUFJRyxVQUFVLEdBQUdDLE1BQUgsQ0FBVUgsUUFBUUUsT0FBUixJQUFtQixFQUE3QixDQUFkO0FBSGlDO0FBQUE7QUFBQTs7QUFBQTtBQUlqQyxvREFBaUJBLE9BQWpCLDRHQUEwQjtBQUFBLFVBQWpCRSxJQUFpQjs7QUFDeEIsYUFBT0gsT0FBUUcsSUFBUixDQUFQO0FBQ0Q7QUFOZ0M7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTs7QUFRakMsU0FBT0gsTUFBUDtBQUNEOztBQUVESSxPQUFPQyxPQUFQLEdBQWlCUixLQUFqQiIsImZpbGUiOiJjbG9uZS5qcyIsInNvdXJjZVJvb3QiOiJsaWIiLCJzb3VyY2VzQ29udGVudCI6WyIvKipcbiAqIENsb25lIGEgb2JqZWN0XG4gKiBAZnVuY3Rpb24gY2xvbmVcbiAqIEBwYXJhbSB7T2JqZWN0fSBzcmMgLSBTb3VyY2Ugb2JqZWN0IHRvIGNsb25lXG4gKiBAcGFyYW0ge09iamVjdH0gW29wdGlvbnM9e31dIC0gT3B0aW9uYWwgc2V0dGluZ3NcbiAqIEByZXR1cm5zIHtPYmplY3R9IC0gQ2xvbmVkIG9iamVjdFxuICovXG4ndXNlIHN0cmljdCdcblxuLyoqIEBsZW5kcyBjbG9uZSAqL1xuZnVuY3Rpb24gY2xvbmUgKHNyYywgb3B0aW9ucyA9IHt9KSB7XG4gIGxldCBjbG9uZWQgPSBPYmplY3QuYXNzaWduKHt9LCBzcmMpXG5cbiAgbGV0IHdpdGhvdXQgPSBbXS5jb25jYXQob3B0aW9ucy53aXRob3V0IHx8IFtdKVxuICBmb3IgKGxldCBuYW1lIG9mIHdpdGhvdXQpIHtcbiAgICBkZWxldGUgY2xvbmVkWyBuYW1lIF1cbiAgfVxuXG4gIHJldHVybiBjbG9uZWRcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBjbG9uZVxuIl19