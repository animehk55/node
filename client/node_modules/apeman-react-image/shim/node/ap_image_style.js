/**
 * Style for ApImage.
 * @class ApImageStyle
 */

'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _assign = require('babel-runtime/core-js/object/assign');

var _assign2 = _interopRequireDefault(_assign);

var _getPrototypeOf = require('babel-runtime/core-js/object/get-prototype-of');

var _getPrototypeOf2 = _interopRequireDefault(_getPrototypeOf);

var _classCallCheck2 = require('babel-runtime/helpers/classCallCheck');

var _classCallCheck3 = _interopRequireDefault(_classCallCheck2);

var _createClass2 = require('babel-runtime/helpers/createClass');

var _createClass3 = _interopRequireDefault(_createClass2);

var _possibleConstructorReturn2 = require('babel-runtime/helpers/possibleConstructorReturn');

var _possibleConstructorReturn3 = _interopRequireDefault(_possibleConstructorReturn2);

var _inherits2 = require('babel-runtime/helpers/inherits');

var _inherits3 = _interopRequireDefault(_inherits2);

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

var _apemanReactStyle = require('apeman-react-style');

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

/** @lends ApImageStyle */
var ApImageStyle = function (_Component) {
  (0, _inherits3.default)(ApImageStyle, _Component);

  function ApImageStyle() {
    (0, _classCallCheck3.default)(this, ApImageStyle);
    return (0, _possibleConstructorReturn3.default)(this, (ApImageStyle.__proto__ || (0, _getPrototypeOf2.default)(ApImageStyle)).apply(this, arguments));
  }

  (0, _createClass3.default)(ApImageStyle, [{
    key: 'render',
    value: function render() {
      var s = this;
      var props = s.props;

      var _ApImageStyle$styleDa = ApImageStyle.styleData(props);

      var all = _ApImageStyle$styleDa.all;
      var small = _ApImageStyle$styleDa.small;
      var medium = _ApImageStyle$styleDa.medium;
      var large = _ApImageStyle$styleDa.large;


      return _react2.default.createElement(
        _apemanReactStyle.ApStyle,
        { data: (0, _assign2.default)(all, props.style),
          smallMediaData: small,
          mediumMediaData: medium,
          largeMediaData: large
        },
        props.children
      );
    }
  }]);
  return ApImageStyle;
}(_react.Component);

(0, _assign2.default)(ApImageStyle, {
  propTypes: {
    style: _react.PropTypes.object,
    backgroundColor: _react.PropTypes.string
  },

  defaultProps: {
    style: {},
    backgroundColor: '#DDD',
    spinColor: 'rgba(255,255,255,0.5)'
  },
  styleData: function styleData(config) {
    var backgroundColor = config.backgroundColor;
    var spinColor = config.spinColor;

    var transitionDuration = 100;
    return {
      all: {
        '.ap-image': {
          backgroundColor: '' + backgroundColor,
          overflow: 'hidden',
          textAlign: 'center',
          position: 'relative',
          display: 'inline-flex',
          justifyContent: 'center',
          alignItems: 'center'
        },
        '.ap-image img': {
          opacity: 0,
          transition: 'width ' + transitionDuration + 'ms, opacity ' + transitionDuration + 'ms'
        },
        '.ap-image-ready img': {
          opacity: 1
        },
        '.ap-image-content': {
          position: 'relative',
          boxSizing: 'border-box'
        },
        '.ap-image-spinner': {
          position: 'absolute',
          left: 0,
          top: 0,
          right: 0,
          bottom: 0,
          textAlign: 'center',
          display: 'inline-flex',
          zIndex: 8,
          backgroundColor: 'rgba(0,0,0,0.1)',
          color: '' + spinColor,
          justifyContent: 'center',
          alignItems: 'center'
        },
        '.ap-image-notfound': {
          display: 'block',
          textAlign: 'center',
          color: 'rgba(0,0,0,0.1)',
          fontFamily: 'monospace'
        }
      },
      small: {},
      medium: {},
      large: {}
    };
  }
});

exports.default = ApImageStyle;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImFwX2ltYWdlX3N0eWxlLmpzeCJdLCJuYW1lcyI6WyJBcEltYWdlU3R5bGUiLCJzIiwicHJvcHMiLCJzdHlsZURhdGEiLCJhbGwiLCJzbWFsbCIsIm1lZGl1bSIsImxhcmdlIiwic3R5bGUiLCJjaGlsZHJlbiIsInByb3BUeXBlcyIsIm9iamVjdCIsImJhY2tncm91bmRDb2xvciIsInN0cmluZyIsImRlZmF1bHRQcm9wcyIsInNwaW5Db2xvciIsImNvbmZpZyIsInRyYW5zaXRpb25EdXJhdGlvbiIsIm92ZXJmbG93IiwidGV4dEFsaWduIiwicG9zaXRpb24iLCJkaXNwbGF5IiwianVzdGlmeUNvbnRlbnQiLCJhbGlnbkl0ZW1zIiwib3BhY2l0eSIsInRyYW5zaXRpb24iLCJib3hTaXppbmciLCJsZWZ0IiwidG9wIiwicmlnaHQiLCJib3R0b20iLCJ6SW5kZXgiLCJjb2xvciIsImZvbnRGYW1pbHkiXSwibWFwcGluZ3MiOiJBQUFBOzs7OztBQUtBOzs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7QUFFQTs7OztBQUNBOzs7O0FBRUE7SUFDTUEsWTs7Ozs7Ozs7Ozs2QkFDTTtBQUNSLFVBQU1DLElBQUksSUFBVjtBQURRLFVBRUZDLEtBRkUsR0FFUUQsQ0FGUixDQUVGQyxLQUZFOztBQUFBLGtDQUk0QkYsYUFBYUcsU0FBYixDQUF1QkQsS0FBdkIsQ0FKNUI7O0FBQUEsVUFJRkUsR0FKRSx5QkFJRkEsR0FKRTtBQUFBLFVBSUdDLEtBSkgseUJBSUdBLEtBSkg7QUFBQSxVQUlVQyxNQUpWLHlCQUlVQSxNQUpWO0FBQUEsVUFJa0JDLEtBSmxCLHlCQUlrQkEsS0FKbEI7OztBQU1SLGFBQ0U7QUFBQTtBQUFBLFVBQVMsTUFBTyxzQkFBY0gsR0FBZCxFQUFtQkYsTUFBTU0sS0FBekIsQ0FBaEI7QUFDUywwQkFBaUJILEtBRDFCO0FBRVMsMkJBQWtCQyxNQUYzQjtBQUdTLDBCQUFpQkM7QUFIMUI7QUFJR0wsY0FBTU87QUFKVCxPQURGO0FBT0Q7Ozs7O0FBR0gsc0JBQWNULFlBQWQsRUFBNEI7QUFDMUJVLGFBQVc7QUFDVEYsV0FBTyxpQkFBTUcsTUFESjtBQUVUQyxxQkFBaUIsaUJBQU1DO0FBRmQsR0FEZTs7QUFNMUJDLGdCQUFjO0FBQ1pOLFdBQU8sRUFESztBQUVaSSxxQkFBaUIsTUFGTDtBQUdaRyxlQUFXO0FBSEMsR0FOWTtBQVcxQlosV0FYMEIscUJBV2ZhLE1BWGUsRUFXUDtBQUFBLFFBQ1hKLGVBRFcsR0FDb0JJLE1BRHBCLENBQ1hKLGVBRFc7QUFBQSxRQUNNRyxTQUROLEdBQ29CQyxNQURwQixDQUNNRCxTQUROOztBQUVqQixRQUFJRSxxQkFBcUIsR0FBekI7QUFDQSxXQUFPO0FBQ0xiLFdBQUs7QUFDSCxxQkFBYTtBQUNYUSxnQ0FBb0JBLGVBRFQ7QUFFWE0sb0JBQVUsUUFGQztBQUdYQyxxQkFBVyxRQUhBO0FBSVhDLG9CQUFVLFVBSkM7QUFLWEMsbUJBQVMsYUFMRTtBQU1YQywwQkFBZ0IsUUFOTDtBQU9YQyxzQkFBWTtBQVBELFNBRFY7QUFVSCx5QkFBaUI7QUFDZkMsbUJBQVMsQ0FETTtBQUVmQyxpQ0FBcUJSLGtCQUFyQixvQkFBc0RBLGtCQUF0RDtBQUZlLFNBVmQ7QUFjSCwrQkFBdUI7QUFDckJPLG1CQUFTO0FBRFksU0FkcEI7QUFpQkgsNkJBQXFCO0FBQ25CSixvQkFBVSxVQURTO0FBRW5CTSxxQkFBVztBQUZRLFNBakJsQjtBQXFCSCw2QkFBcUI7QUFDbkJOLG9CQUFVLFVBRFM7QUFFbkJPLGdCQUFNLENBRmE7QUFHbkJDLGVBQUssQ0FIYztBQUluQkMsaUJBQU8sQ0FKWTtBQUtuQkMsa0JBQVEsQ0FMVztBQU1uQlgscUJBQVcsUUFOUTtBQU9uQkUsbUJBQVMsYUFQVTtBQVFuQlUsa0JBQVEsQ0FSVztBQVNuQm5CLDJCQUFpQixpQkFURTtBQVVuQm9CLHNCQUFVakIsU0FWUztBQVduQk8sMEJBQWdCLFFBWEc7QUFZbkJDLHNCQUFZO0FBWk8sU0FyQmxCO0FBbUNILDhCQUFzQjtBQUNwQkYsbUJBQVMsT0FEVztBQUVwQkYscUJBQVcsUUFGUztBQUdwQmEsaUJBQU8saUJBSGE7QUFJcEJDLHNCQUFZO0FBSlE7QUFuQ25CLE9BREE7QUEyQ0w1QixhQUFPLEVBM0NGO0FBNENMQyxjQUFRLEVBNUNIO0FBNkNMQyxhQUFPO0FBN0NGLEtBQVA7QUErQ0Q7QUE3RHlCLENBQTVCOztrQkFnRWVQLFkiLCJmaWxlIjoiYXBfaW1hZ2Vfc3R5bGUuanN4Iiwic291cmNlUm9vdCI6ImxpYiIsInNvdXJjZXNDb250ZW50IjpbIi8qKlxuICogU3R5bGUgZm9yIEFwSW1hZ2UuXG4gKiBAY2xhc3MgQXBJbWFnZVN0eWxlXG4gKi9cblxuJ3VzZSBzdHJpY3QnXG5cbmltcG9ydCBSZWFjdCwgeyBDb21wb25lbnQsIFByb3BUeXBlcyBhcyB0eXBlcyB9IGZyb20gJ3JlYWN0J1xuaW1wb3J0IHsgQXBTdHlsZSB9IGZyb20gJ2FwZW1hbi1yZWFjdC1zdHlsZSdcblxuLyoqIEBsZW5kcyBBcEltYWdlU3R5bGUgKi9cbmNsYXNzIEFwSW1hZ2VTdHlsZSBleHRlbmRzIENvbXBvbmVudCB7XG4gIHJlbmRlciAoKSB7XG4gICAgY29uc3QgcyA9IHRoaXNcbiAgICBsZXQgeyBwcm9wcyB9ID0gc1xuXG4gICAgbGV0IHsgYWxsLCBzbWFsbCwgbWVkaXVtLCBsYXJnZSB9ID0gQXBJbWFnZVN0eWxlLnN0eWxlRGF0YShwcm9wcylcblxuICAgIHJldHVybiAoXG4gICAgICA8QXBTdHlsZSBkYXRhPXsgT2JqZWN0LmFzc2lnbihhbGwsIHByb3BzLnN0eWxlKSB9XG4gICAgICAgICAgICAgICBzbWFsbE1lZGlhRGF0YT17IHNtYWxsIH1cbiAgICAgICAgICAgICAgIG1lZGl1bU1lZGlhRGF0YT17IG1lZGl1bSB9XG4gICAgICAgICAgICAgICBsYXJnZU1lZGlhRGF0YT17IGxhcmdlIH1cbiAgICAgID57IHByb3BzLmNoaWxkcmVuIH08L0FwU3R5bGU+XG4gICAgKVxuICB9XG59XG5cbk9iamVjdC5hc3NpZ24oQXBJbWFnZVN0eWxlLCB7XG4gIHByb3BUeXBlczoge1xuICAgIHN0eWxlOiB0eXBlcy5vYmplY3QsXG4gICAgYmFja2dyb3VuZENvbG9yOiB0eXBlcy5zdHJpbmdcbiAgfSxcblxuICBkZWZhdWx0UHJvcHM6IHtcbiAgICBzdHlsZToge30sXG4gICAgYmFja2dyb3VuZENvbG9yOiAnI0RERCcsXG4gICAgc3BpbkNvbG9yOiAncmdiYSgyNTUsMjU1LDI1NSwwLjUpJ1xuICB9LFxuICBzdHlsZURhdGEgKGNvbmZpZykge1xuICAgIGxldCB7IGJhY2tncm91bmRDb2xvciwgc3BpbkNvbG9yIH0gPSBjb25maWdcbiAgICBsZXQgdHJhbnNpdGlvbkR1cmF0aW9uID0gMTAwXG4gICAgcmV0dXJuIHtcbiAgICAgIGFsbDoge1xuICAgICAgICAnLmFwLWltYWdlJzoge1xuICAgICAgICAgIGJhY2tncm91bmRDb2xvcjogYCR7YmFja2dyb3VuZENvbG9yfWAsXG4gICAgICAgICAgb3ZlcmZsb3c6ICdoaWRkZW4nLFxuICAgICAgICAgIHRleHRBbGlnbjogJ2NlbnRlcicsXG4gICAgICAgICAgcG9zaXRpb246ICdyZWxhdGl2ZScsXG4gICAgICAgICAgZGlzcGxheTogJ2lubGluZS1mbGV4JyxcbiAgICAgICAgICBqdXN0aWZ5Q29udGVudDogJ2NlbnRlcicsXG4gICAgICAgICAgYWxpZ25JdGVtczogJ2NlbnRlcidcbiAgICAgICAgfSxcbiAgICAgICAgJy5hcC1pbWFnZSBpbWcnOiB7XG4gICAgICAgICAgb3BhY2l0eTogMCxcbiAgICAgICAgICB0cmFuc2l0aW9uOiBgd2lkdGggJHt0cmFuc2l0aW9uRHVyYXRpb259bXMsIG9wYWNpdHkgJHt0cmFuc2l0aW9uRHVyYXRpb259bXNgXG4gICAgICAgIH0sXG4gICAgICAgICcuYXAtaW1hZ2UtcmVhZHkgaW1nJzoge1xuICAgICAgICAgIG9wYWNpdHk6IDFcbiAgICAgICAgfSxcbiAgICAgICAgJy5hcC1pbWFnZS1jb250ZW50Jzoge1xuICAgICAgICAgIHBvc2l0aW9uOiAncmVsYXRpdmUnLFxuICAgICAgICAgIGJveFNpemluZzogJ2JvcmRlci1ib3gnXG4gICAgICAgIH0sXG4gICAgICAgICcuYXAtaW1hZ2Utc3Bpbm5lcic6IHtcbiAgICAgICAgICBwb3NpdGlvbjogJ2Fic29sdXRlJyxcbiAgICAgICAgICBsZWZ0OiAwLFxuICAgICAgICAgIHRvcDogMCxcbiAgICAgICAgICByaWdodDogMCxcbiAgICAgICAgICBib3R0b206IDAsXG4gICAgICAgICAgdGV4dEFsaWduOiAnY2VudGVyJyxcbiAgICAgICAgICBkaXNwbGF5OiAnaW5saW5lLWZsZXgnLFxuICAgICAgICAgIHpJbmRleDogOCxcbiAgICAgICAgICBiYWNrZ3JvdW5kQ29sb3I6ICdyZ2JhKDAsMCwwLDAuMSknLFxuICAgICAgICAgIGNvbG9yOiBgJHtzcGluQ29sb3J9YCxcbiAgICAgICAgICBqdXN0aWZ5Q29udGVudDogJ2NlbnRlcicsXG4gICAgICAgICAgYWxpZ25JdGVtczogJ2NlbnRlcidcbiAgICAgICAgfSxcbiAgICAgICAgJy5hcC1pbWFnZS1ub3Rmb3VuZCc6IHtcbiAgICAgICAgICBkaXNwbGF5OiAnYmxvY2snLFxuICAgICAgICAgIHRleHRBbGlnbjogJ2NlbnRlcicsXG4gICAgICAgICAgY29sb3I6ICdyZ2JhKDAsMCwwLDAuMSknLFxuICAgICAgICAgIGZvbnRGYW1pbHk6ICdtb25vc3BhY2UnXG4gICAgICAgIH1cbiAgICAgIH0sXG4gICAgICBzbWFsbDoge30sXG4gICAgICBtZWRpdW06IHt9LFxuICAgICAgbGFyZ2U6IHt9XG4gICAgfVxuICB9XG59KVxuXG5leHBvcnQgZGVmYXVsdCBBcEltYWdlU3R5bGVcbiJdfQ==