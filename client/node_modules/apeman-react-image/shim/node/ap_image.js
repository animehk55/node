/**
 * apeman react package for image component.
 * @class ApImage
 */

'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _extends2 = require('babel-runtime/helpers/extends');

var _extends3 = _interopRequireDefault(_extends2);

var _assign = require('babel-runtime/core-js/object/assign');

var _assign2 = _interopRequireDefault(_assign);

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

var _reactDom = require('react-dom');

var _reactDom2 = _interopRequireDefault(_reactDom);

var _classnames = require('classnames');

var _classnames2 = _interopRequireDefault(_classnames);

var _numcal = require('numcal');

var _numcal2 = _interopRequireDefault(_numcal);

var _scaled_size = require('./sizing/scaled_size');

var _scaled_size2 = _interopRequireDefault(_scaled_size);

var _apemanReactSpinner = require('apeman-react-spinner');

var _apemanReactMixinPure = require('apeman-react-mixin-pure');

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

/** @lends ApImage */
var ApImage = _react2.default.createClass({
  displayName: 'ApImage',


  // --------------------
  // Specs
  // --------------------

  propTypes: {
    /** Image scaling policy */
    scale: _react.PropTypes.oneOf(['fit', 'fill', 'none']),
    /** Image width */
    width: _react.PropTypes.oneOfType([_react.PropTypes.number, _react.PropTypes.string]),
    /** Image height */
    height: _react.PropTypes.oneOfType([_react.PropTypes.number, _react.PropTypes.string]),
    /** Image src string */
    src: _react.PropTypes.string,
    /** Alt test */
    alt: _react.PropTypes.string,
    /** Them of spinner */
    spinnerTheme: _react.PropTypes.string,
    /** Handler on image load */
    onLoad: _react.PropTypes.func,
    /** Handler on image error. */
    onError: _react.PropTypes.func
  },

  mixins: [_apemanReactMixinPure.ApPureMixin],

  statics: {
    scaledSize: _scaled_size2.default,
    zeroIfNaN: function zeroIfNaN(value) {
      return isNaN(value) ? 0 : value;
    },
    nullIfNaN: function nullIfNaN(value) {
      return isNaN(value) ? null : value;
    }
  },

  getInitialState: function getInitialState() {
    var s = this;
    return {
      imgWidth: null,
      imgHeight: null,
      mounted: false,
      ready: false,
      loading: !!s.props.src,
      error: null
    };
  },
  getDefaultProps: function getDefaultProps() {
    return {
      scale: 'none',
      width: 300,
      height: 150,
      src: null,
      alt: 'NO IMAGE',
      spinnerTheme: _apemanReactSpinner.ApSpinner.DEFAULT_THEME,
      onLoad: null,
      onError: null
    };
  },
  render: function render() {
    var s = this;
    var state = s.state;
    var props = s.props;
    var handleLoad = s.handleLoad;
    var handleError = s.handleError;
    var _props$width = props.width;
    var width = _props$width === undefined ? null : _props$width;
    var _props$height = props.height;
    var height = _props$height === undefined ? null : _props$height;
    var src = props.src;
    var alt = props.alt;
    var mounted = state.mounted;
    var error = state.error;
    var ready = state.ready;
    var loading = state.loading;
    var imgWidth = state.imgWidth;
    var imgHeight = state.imgHeight;

    var className = (0, _classnames2.default)('ap-image', props.className, {
      'ap-image-loading': src && loading,
      'ap-image-ready': src && ready
    });
    return _react2.default.createElement(
      'div',
      { className: className,
        style: (0, _assign2.default)({ width: width, height: height }, props.style) },
      mounted && error ? _react2.default.createElement(ApImage.Alt, { alt: alt }) : null,
      mounted && !error ? _react2.default.createElement(ApImage.Img, (0, _extends3.default)({ alt: alt,
        src: src
      }, { imgWidth: imgWidth, imgHeight: imgHeight, handleLoad: handleLoad, handleError: handleError })) : null,
      loading ? _react2.default.createElement(_apemanReactSpinner.ApSpinner, { className: 'ap-image-spinner',
        size: 'xx-large',
        theme: props.spinnerTheme,
        style: { width: width, height: height } }) : null
    );
  },


  // --------------------
  // Lifecycle
  // --------------------

  componentWillMount: function componentWillMount() {
    var s = this;
  },
  componentDidMount: function componentDidMount() {
    var s = this;
    s.setState({
      mounted: true
    });
    s._resizeTimer = setTimeout(function () {
      if (!s.state.mounted) {
        return;
      }
      s.elm = _reactDom2.default.findDOMNode(s);
      s.resizeImage();
    }, 0);
  },
  componentWillUnmount: function componentWillUnmount() {
    var s = this;
    s.setState({
      mounted: false
    });
    s.elm = null;
    clearTimeout(s._resizeTimer);
  },
  componentWillReceiveProps: function componentWillReceiveProps(nextProps) {
    var s = this;
    var props = s.props;

    var srcChanged = nextProps.src !== props.src;
    if (srcChanged) {
      s.setState({
        ready: false,
        loading: true,
        error: null
      });
      setTimeout(function () {
        return s.resizeImage();
      }, 0);
      return;
    }
    var widthChanged = nextProps.width !== props.width;
    var heightChanged = nextProps.height !== props.height;
    if (widthChanged || heightChanged) {
      setTimeout(function () {
        return s.resizeImage();
      }, 0);
    }
  },


  // ------------------
  // Helper
  // ------------------

  handleLoad: function handleLoad(e) {
    var s = this;
    var props = s.props;
    var _e$target = e.target;
    var width = _e$target.width;
    var height = _e$target.height;

    setTimeout(function () {
      return s.resizeImage(width, height);
    }, 0);

    s.setState({
      error: null,
      ready: true,
      loading: false
    });

    if (props.onLoad) {
      props.onLoad(e);
    }
  },
  handleError: function handleError(e) {
    var s = this;
    var props = s.props;


    s.setState({
      error: e,
      loading: false
    });

    if (props.onError) {
      props.onError(e);
    }
  },
  resizeImage: function resizeImage(imgContentWidth, imgContentHeight) {
    var s = this;
    var state = s.state;
    var props = s.props;
    var elm = s.elm;

    if (!elm) {
      return false;
    }

    imgContentWidth = imgContentWidth || state.imgContentWidth;
    imgContentHeight = imgContentHeight || state.imgContentHeight;

    var valid = imgContentWidth && imgContentHeight;
    if (!valid) {
      return;
    }

    var frameSize = {
      width: elm.offsetWidth,
      height: elm.offsetHeight
    };
    var contentSize = {
      height: imgContentHeight,
      width: imgContentWidth
    };
    var scaledSize = ApImage.scaledSize(contentSize, frameSize, props.scale);

    s.setState({
      imgContentWidth: imgContentWidth,
      imgContentHeight: imgContentHeight,
      imgWidth: scaledSize.width || imgContentWidth,
      imgHeight: scaledSize.height || imgContentHeight,
      ready: true,
      loading: false
    });
  },


  elm: null

});

(0, _assign2.default)(ApImage, {
  Img: function Img(_ref) {
    var src = _ref.src;
    var alt = _ref.alt;
    var imgWidth = _ref.imgWidth;
    var imgHeight = _ref.imgHeight;
    var handleLoad = _ref.handleLoad;
    var handleError = _ref.handleError;
    var nullIfNaN = ApImage.nullIfNaN;


    var style = {
      width: nullIfNaN(imgWidth),
      height: nullIfNaN(imgHeight)
    };
    return _react2.default.createElement('img', { src: src,
      alt: alt,
      className: (0, _classnames2.default)('ap-image-content'),
      style: style,
      onLoad: handleLoad,
      onError: handleError
    });
  },
  Alt: function Alt(_ref2) {
    var height = _ref2.height;
    var alt = _ref2.alt;

    var style = {
      lineHeight: height + 'px',
      fontSize: _numcal2.default.min(height * 0.4, 18) + 'px'
    };
    return _react2.default.createElement(
      'div',
      { className: 'ap-image-notfound',
        style: style
      },
      alt
    );
  }
});

exports.default = ApImage;
//# sourceMappingURL=data:application/json;base64,