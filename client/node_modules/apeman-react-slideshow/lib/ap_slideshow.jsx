/**
 * apeman react package for slideshow components.
 * @class ApSlideshow
 */

'use strict'

import React, {PropTypes as types} from 'react'
import classnames from 'classnames'
import imageEffect from './effects/image_effect'
import {ApImage} from 'apeman-react-image'
import {ApTouchable} from 'apeman-react-touchable'

/** @lends ApSlideshow */
const ApSlideshow = React.createClass({

  // --------------------
  // Specs
  // --------------------

  propTypes: {
    /** Image URLs */
    images: types.array,
    /** Repeat flipping */
    repeat: types.bool,
    /** Component width */
    width: types.number,
    /** Component height */
    height: types.number,
    /** Flip interval */
    interval: types.number,
    /** Flip effect */
    effect: types.oneOf([
      'fadeAndScale'
    ])
  },

  mixins: [],

  statics: {},

  getInitialState () {
    return {
      index: 0
    }
  },

  getDefaultProps () {
    return {
      images: [],
      repeat: false,
      interval: 20000,
      height: 280,
      width: 420,
      effect: 'fadeAndScale'
    }
  },

  render () {
    const s = this
    let { state, props } = s

    let size = {
      width: props.width,
      height: props.height
    }

    let curIndex = state.index % (props.images.length - 1)
    let images = props.images.map((image, i) => {
      let prev = i === curIndex - 1
      let cur = i === curIndex

      let effect = imageEffect(props.effect, {
        duration: props.interval
      })

      return s._renderImage(image, {
        'ap-slideshow-image-active': prev || cur
      }, i, effect)
    })

    return (
      <div className={ classnames('ap-slideshow', props.className)}
           style={ Object.assign({}, size, props.style) }>
        <ApTouchable onTap={s.tick}>
          <div className='ap-slideshow-inner'
               style={ Object.assign({}, size) }>
            { images }
          </div>
        </ApTouchable>
      </div>
    )
  },

  // --------------------
  // Lifecycle
  // --------------------

  componentWillMount () {
    const s = this
  },

  componentDidMount () {
    const s = this
    s.startTicking()

    setTimeout(() => {
      s.tick()
    }, 800)
  },

  componentWillUnmount () {
    const s = this
    s.stopTicking()
  },

  // ------------------
  // Helper
  // ------------------

  startTicking() {
    const s = this
    s._ticking = true
    s.tick()
  },

  stopTicking () {
    const s = this
    s._ticking = false
    clearTimeout(s._tickTimer)
    s._tickTimer = null
  },

  tick () {
    const s = this
    const { props, state } = s

    let { index } = state

    s.setState({
      index: index + 1
    })
    clearTimeout(s._tickTimer)
    s._tickTimer = setTimeout(() => {
      s.tick()
    }, props.interval)
  },

  // ------------------
  // Private
  // ------------------

  _tickTimer: null,
  _renderImage (src, className, i, style) {
    const s = this
    return (
      <ApImage className={ classnames('ap-slideshow-image', className) }
               style={ Object.assign({}, style) }
               key={ `ap-slideshow-image-${i}` }
               scale={ 'fill' }
               width='150%'
               height='150%'
               src={ src }/>
    )
  }
})

export default ApSlideshow
