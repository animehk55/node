/**
 * apeman react package for style component.
 * @class ApStyle
 */

'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

var _server = require('react-dom/server');

var _server2 = _interopRequireDefault(_server);

var _iftype = require('iftype');

var _iftype2 = _interopRequireDefault(_iftype);

var _os = require('os');

var _classnames = require('classnames');

var _classnames2 = _interopRequireDefault(_classnames);

var _style_constants = require('./styling/style_constants');

var _style_string = require('./styling/style_string');

var _style_string2 = _interopRequireDefault(_style_string);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

/** @lends ApStyle */
var ApStyle = _react2.default.createClass({
  displayName: 'ApStyle',


  // --------------------
  // Specifications
  // --------------------
  statics: {
    stringifyStyle: function stringifyStyle(style) {
      if (!style) {
        return '';
      }
      var isString = _iftype2.default.isString(style);
      return isString ? style : (0, _style_string2.default)(style);
    },
    stringifyMediaStyle: function stringifyMediaStyle(style, width) {
      if (!style) {
        return '';
      }
      return '@media (min-width: ' + width + 'px) { ' + ApStyle.stringifyStyle(style) + ' }';
    },
    styleContent: function styleContent(elm) {
      return _server2.default.renderToStaticMarkup(elm).replace(/<style.*?>/, '').replace(/<\/style.*?>/, '');
    },

    DEFAULT_HIGHLIGHT_COLOR: '#38E',
    DEFAULT_BACKGROUND_COLOR: '#FFF',
    DEFAULT_DANGER_COLOR: '#B31818',
    NORMAL_COLOR: '#555',
    INFO_COLOR: '#0C843A',
    WARN_COLOR: '#9C9C19',
    ERROR_COLOR: '#B31818',
    CAPTION_COLOR: '#999',
    CAPTION_BORDER_COLOR: '#F0F0F0',
    COVER_BACKGROUND: 'rgba(255,255,255,0.8)',
    COVER_COLOR: '#CCC',
    CONTENT_PADDING: 4,
    CONTENT_WIDTH: 480,
    ROW_HEIGHT: 32,
    CONTAINER_WIDTH: 1024,

    SMALL_MEDIA_BREAKPOINT: _style_constants.SMALL_MEDIA_BREAKPOINT,
    MEDIUM_MEDIA_BREAKPOINT: _style_constants.MEDIUM_MEDIA_BREAKPOINT,
    LARGE_MEDIA_BREAKPOINT: _style_constants.LARGE_MEDIA_BREAKPOINT
  },
  propTypes: {
    data: _react.PropTypes.oneOfType([_react.PropTypes.string, _react.PropTypes.objectOf(_react.PropTypes.object)]),
    smallMediaData: _react.PropTypes.oneOfType([_react.PropTypes.string, _react.PropTypes.object]),
    mediumMediaData: _react.PropTypes.oneOfType([_react.PropTypes.string, _react.PropTypes.object]),
    largeMediaData: _react.PropTypes.oneOfType([_react.PropTypes.string, _react.PropTypes.object]),
    type: _react.PropTypes.string
  },
  getDefaultProps: function getDefaultProps() {
    return {
      data: null,
      smallMediaData: null,
      mediumMediaData: null,
      largeMediaData: null,
      type: 'text/css'
    };
  },
  getInitialState: function getInitialState() {
    return {};
  },
  render: function render() {
    var s = this;
    var props = s.props;


    var styleString = s.getStyleString() || '';
    var childrenString = s.getChildrenString() || '';
    return _react2.default.createElement('style', { className: (0, _classnames2.default)('ap-style', props.className),
      id: props.id || null,
      type: props.type,
      dangerouslySetInnerHTML: { __html: styleString + childrenString } });
  },


  // --------------------
  // Specifications
  // --------------------
  getStyleString: function getStyleString() {
    var s = this;
    var props = s.props;
    var data = props.data,
        smallMediaData = props.smallMediaData,
        mediumMediaData = props.mediumMediaData,
        largeMediaData = props.largeMediaData;

    return [ApStyle.stringifyStyle(data), ApStyle.stringifyMediaStyle(smallMediaData, _style_constants.SMALL_MEDIA_BREAKPOINT), ApStyle.stringifyMediaStyle(mediumMediaData, _style_constants.MEDIUM_MEDIA_BREAKPOINT), ApStyle.stringifyMediaStyle(largeMediaData, _style_constants.LARGE_MEDIA_BREAKPOINT)].filter(Boolean).join(_os.EOL);
  },
  getChildrenString: function getChildrenString() {
    var s = this;
    var children = s.props.children;

    if (!children) {
      return null;
    }
    return [].concat(children).map(function (child) {
      return child;
    }).join(_os.EOL);
  }
});

exports.default = ApStyle;
//# sourceMappingURL=data:application/json;base64,