/**
 * apeman react package for icon components.
 * @class ApIcon
 */

'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

var _asobj = require('asobj');

var _asenv = require('asenv');

var _classnames = require('classnames');

var _classnames2 = _interopRequireDefault(_classnames);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var assertCache = {};
var notfoundCache = [];

var ASSERT_DELAY = 400;

/** @lends ApIcon */
var ApIcon = _react2.default.createClass({
  displayName: 'ApIcon',


  // --------------------
  // Specs
  // --------------------

  propTypes: {},

  mixins: [],

  statics: {
    /**
     * Check if has style.
     * @param className
     */
    hasStyleWithClass: function hasStyleWithClass(className) {
      var styleSheets = document.styleSheets || [];
      for (var i = 0; i < styleSheets.length; i++) {
        var styleSheet = styleSheets[i];
        var rules = styleSheet.rules || styleSheet.cssRules || [];
        for (var j = 0; j < rules.length; j++) {
          var rule = rules[j];
          var selectorText = rule.selectorText;
          var hit = selectorText && new RegExp('.' + className).test(selectorText);
          if (hit) {
            return true;
          }
        }
      }
      return false;
    },
    warnNotFound: function warnNotFound() {
      setTimeout(function () {
        if (notfoundCache.length > 0) {
          console.warn('[ApIcon] No style found for class ' + notfoundCache.map(function (notFound) {
            return '"' + notFound + '"';
          }).join(', ') + '.\nYou seeing this warning either because of:\n  1. Misspelling the name or missing some stylesheets.\n  2. Using stylesheets from another domain.');
          notfoundCache = [];
        }
      }, 100);
    },

    ASSERT_DELAY: ASSERT_DELAY
  },

  getInitialState: function getInitialState() {
    return {};
  },
  getDefaultProps: function getDefaultProps() {
    return {};
  },
  render: function render() {
    var s = this;
    var props = s.props;


    return _react2.default.createElement('i', { className: (0, _classnames2.default)('ap-icon', props.className),
      style: Object.assign({}, props.style),
      'aria-hidden': 'true'
    });
  },


  // --------------------
  // Lifecycle
  // --------------------

  shouldComponentUpdate: function shouldComponentUpdate(nextProps, nextState) {
    var s = this;
    var props = s.props;
    var state = s.state;

    return !(0, _asobj.shallowEqual)(props, nextProps) || !(0, _asobj.shallowEqual)(state, nextState);
  },
  componentDidMount: function componentDidMount() {
    var s = this;
    s.mounted = true;
    var props = s.props;

    if (!(0, _asenv.isProduction)()) {
      s.assertClassName(props.className, { delay: 1200 });
    }
  },
  componentWillReceiveProps: function componentWillReceiveProps(nextProps) {
    var s = this;
    if (!(0, _asenv.isProduction)()) {
      if (nextProps.hasOwnProperty('className')) {
        s.assertClassName(nextProps.className);
      }
    }
  },
  componentWillUnmount: function componentWillUnmount() {
    var s = this;
    clearTimeout(s._assertTimer);
  },


  // ------------------
  // Helper
  // ------------------

  assertClassName: function assertClassName(className) {
    var options = arguments.length <= 1 || arguments[1] === undefined ? {} : arguments[1];

    if (!className) {
      return;
    }
    var s = this;
    clearTimeout(s._assertTimer);
    s._assertTimer = setTimeout(function () {
      if (!s.mounted) {
        return;
      }
      className.split(/\s/g).forEach(function (className) {
        if (!className) {
          return;
        }
        if (assertCache.hasOwnProperty(className)) {
          return;
        }
        if (/^ap/.test(className)) {
          return;
        }
        var valid = ApIcon.hasStyleWithClass(className);
        if (!valid) {
          notfoundCache.push(className);
        }
        assertCache[className] = valid;
      });
      ApIcon.warnNotFound();
    }, options.delay || ASSERT_DELAY);
  },


  // ------------------
  // Private
  // ------------------

  _assertTimer: -1
});

exports.default = ApIcon;
//# sourceMappingURL=data:application/json;base64,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USxLQUFSLElBQWlCLFlBckJILENBQWpCO0FBc0JELEdBdEk4Qjs7O0FBd0kvQjtBQUNBO0FBQ0E7O0FBRUEsZ0JBQWMsQ0FBQztBQTVJZ0IsQ0FBbEIsQ0FBZjs7a0JBK0llLE0iLCJmaWxlIjoiYXBfaWNvbi5qc3giLCJzb3VyY2VSb290IjoibGliIiwic291cmNlc0NvbnRlbnQiOlsiLyoqXG4gKiBhcGVtYW4gcmVhY3QgcGFja2FnZSBmb3IgaWNvbiBjb21wb25lbnRzLlxuICogQGNsYXNzIEFwSWNvblxuICovXG5cbid1c2Ugc3RyaWN0J1xuXG5pbXBvcnQgUmVhY3QsIHtQcm9wVHlwZXMgYXMgdHlwZXN9IGZyb20gJ3JlYWN0J1xuaW1wb3J0IHtzaGFsbG93RXF1YWx9IGZyb20gJ2Fzb2JqJ1xuaW1wb3J0IHtpc1Byb2R1Y3Rpb259IGZyb20gJ2FzZW52J1xuaW1wb3J0IGNsYXNzbmFtZXMgZnJvbSAnY2xhc3NuYW1lcydcblxubGV0IGFzc2VydENhY2hlID0ge31cbmxldCBub3Rmb3VuZENhY2hlID0gW11cblxuY29uc3QgQVNTRVJUX0RFTEFZID0gNDAwXG5cbi8qKiBAbGVuZHMgQXBJY29uICovXG5jb25zdCBBcEljb24gPSBSZWFjdC5jcmVhdGVDbGFzcyh7XG5cbiAgLy8gLS0tLS0tLS0tLS0tLS0tLS0tLS1cbiAgLy8gU3BlY3NcbiAgLy8gLS0tLS0tLS0tLS0tLS0tLS0tLS1cblxuICBwcm9wVHlwZXM6IHt9LFxuXG4gIG1peGluczogW10sXG5cbiAgc3RhdGljczoge1xuICAgIC8qKlxuICAgICAqIENoZWNrIGlmIGhhcyBzdHlsZS5cbiAgICAgKiBAcGFyYW0gY2xhc3NOYW1lXG4gICAgICovXG4gICAgaGFzU3R5bGVXaXRoQ2xhc3MgKGNsYXNzTmFtZSkge1xuICAgICAgbGV0IHN0eWxlU2hlZXRzID0gZG9jdW1lbnQuc3R5bGVTaGVldHMgfHwgW11cbiAgICAgIGZvciAobGV0IGkgPSAwOyBpIDwgc3R5bGVTaGVldHMubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgbGV0IHN0eWxlU2hlZXQgPSBzdHlsZVNoZWV0c1sgaSBdXG4gICAgICAgIGxldCBydWxlcyA9IHN0eWxlU2hlZXQucnVsZXMgfHwgc3R5bGVTaGVldC5jc3NSdWxlcyB8fCBbXVxuICAgICAgICBmb3IgKGxldCBqID0gMDsgaiA8IHJ1bGVzLmxlbmd0aDsgaisrKSB7XG4gICAgICAgICAgbGV0IHJ1bGUgPSBydWxlc1sgaiBdXG4gICAgICAgICAgbGV0IHNlbGVjdG9yVGV4dCA9IHJ1bGUuc2VsZWN0b3JUZXh0XG4gICAgICAgICAgbGV0IGhpdCA9IHNlbGVjdG9yVGV4dCAmJiBuZXcgUmVnRXhwKGBcXC4ke2NsYXNzTmFtZX1gKS50ZXN0KHNlbGVjdG9yVGV4dClcbiAgICAgICAgICBpZiAoaGl0KSB7XG4gICAgICAgICAgICByZXR1cm4gdHJ1ZVxuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgfVxuICAgICAgcmV0dXJuIGZhbHNlXG4gICAgfSxcblxuICAgIHdhcm5Ob3RGb3VuZCAoKSB7XG4gICAgICBzZXRUaW1lb3V0KCgpID0+IHtcbiAgICAgICAgaWYgKG5vdGZvdW5kQ2FjaGUubGVuZ3RoID4gMCkge1xuICAgICAgICAgIGNvbnNvbGUud2FybihcbiAgICAgICAgICAgIGBbQXBJY29uXSBObyBzdHlsZSBmb3VuZCBmb3IgY2xhc3MgJHtub3Rmb3VuZENhY2hlLm1hcCgobm90Rm91bmQpID0+IGBcIiR7bm90Rm91bmR9XCJgKS5qb2luKCcsICcpfS5cbllvdSBzZWVpbmcgdGhpcyB3YXJuaW5nIGVpdGhlciBiZWNhdXNlIG9mOlxuICAxLiBNaXNzcGVsbGluZyB0aGUgbmFtZSBvciBtaXNzaW5nIHNvbWUgc3R5bGVzaGVldHMuXG4gIDIuIFVzaW5nIHN0eWxlc2hlZXRzIGZyb20gYW5vdGhlciBkb21haW4uYFxuICAgICAgICAgIClcbiAgICAgICAgICBub3Rmb3VuZENhY2hlID0gW11cbiAgICAgICAgfVxuICAgICAgfSwgMTAwKVxuICAgIH0sXG4gICAgQVNTRVJUX0RFTEFZXG4gIH0sXG5cbiAgZ2V0SW5pdGlhbFN0YXRlICgpIHtcbiAgICByZXR1cm4ge31cbiAgfSxcblxuICBnZXREZWZhdWx0UHJvcHMgKCkge1xuICAgIHJldHVybiB7fVxuICB9LFxuXG4gIHJlbmRlciAoKSB7XG4gICAgY29uc3QgcyA9IHRoaXNcbiAgICBsZXQgeyBwcm9wcyB9ID0gc1xuXG4gICAgcmV0dXJuIChcbiAgICAgIDxpIGNsYXNzTmFtZT17IGNsYXNzbmFtZXMoJ2FwLWljb24nLCBwcm9wcy5jbGFzc05hbWUpIH1cbiAgICAgICAgIHN0eWxlPXtPYmplY3QuYXNzaWduKHt9LCBwcm9wcy5zdHlsZSl9XG4gICAgICAgICBhcmlhLWhpZGRlbj0ndHJ1ZSdcbiAgICAgID5cbiAgICAgIDwvaT5cbiAgICApXG4gIH0sXG5cbiAgLy8gLS0tLS0tLS0tLS0tLS0tLS0tLS1cbiAgLy8gTGlmZWN5Y2xlXG4gIC8vIC0tLS0tLS0tLS0tLS0tLS0tLS0tXG5cbiAgc2hvdWxkQ29tcG9uZW50VXBkYXRlIChuZXh0UHJvcHMsIG5leHRTdGF0ZSkge1xuICAgIGNvbnN0IHMgPSB0aGlzXG4gICAgbGV0IHsgcHJvcHMsIHN0YXRlIH0gPSBzXG4gICAgcmV0dXJuICFzaGFsbG93RXF1YWwocHJvcHMsIG5leHRQcm9wcykgfHwgIXNoYWxsb3dFcXVhbChzdGF0ZSwgbmV4dFN0YXRlKVxuICB9LFxuXG4gIGNvbXBvbmVudERpZE1vdW50ICgpIHtcbiAgICBjb25zdCBzID0gdGhpc1xuICAgIHMubW91bnRlZCA9IHRydWVcbiAgICBsZXQgeyBwcm9wcyB9ID0gc1xuICAgIGlmICghaXNQcm9kdWN0aW9uKCkpIHtcbiAgICAgIHMuYXNzZXJ0Q2xhc3NOYW1lKHByb3BzLmNsYXNzTmFtZSwgeyBkZWxheTogMTIwMCB9KVxuICAgIH1cbiAgfSxcblxuICBjb21wb25lbnRXaWxsUmVjZWl2ZVByb3BzIChuZXh0UHJvcHMpIHtcbiAgICBjb25zdCBzID0gdGhpc1xuICAgIGlmICghaXNQcm9kdWN0aW9uKCkpIHtcbiAgICAgIGlmIChuZXh0UHJvcHMuaGFzT3duUHJvcGVydHkoJ2NsYXNzTmFtZScpKSB7XG4gICAgICAgIHMuYXNzZXJ0Q2xhc3NOYW1lKG5leHRQcm9wcy5jbGFzc05hbWUpXG4gICAgICB9XG4gICAgfVxuICB9LFxuXG4gIGNvbXBvbmVudFdpbGxVbm1vdW50ICgpIHtcbiAgICBjb25zdCBzID0gdGhpc1xuICAgIGNsZWFyVGltZW91dChzLl9hc3NlcnRUaW1lcilcbiAgfSxcblxuICAvLyAtLS0tLS0tLS0tLS0tLS0tLS1cbiAgLy8gSGVscGVyXG4gIC8vIC0tLS0tLS0tLS0tLS0tLS0tLVxuXG4gIGFzc2VydENsYXNzTmFtZSAoY2xhc3NOYW1lLCBvcHRpb25zID0ge30pIHtcbiAgICBpZiAoIWNsYXNzTmFtZSkge1xuICAgICAgcmV0dXJuXG4gICAgfVxuICAgIGNvbnN0IHMgPSB0aGlzXG4gICAgY2xlYXJUaW1lb3V0KHMuX2Fzc2VydFRpbWVyKVxuICAgIHMuX2Fzc2VydFRpbWVyID0gc2V0VGltZW91dCgoKSA9PiB7XG4gICAgICBpZiAoIXMubW91bnRlZCkge1xuICAgICAgICByZXR1cm5cbiAgICAgIH1cbiAgICAgIGNsYXNzTmFtZS5zcGxpdCgvXFxzL2cpLmZvckVhY2goKGNsYXNzTmFtZSkgPT4ge1xuICAgICAgICBpZiAoIWNsYXNzTmFtZSkge1xuICAgICAgICAgIHJldHVyblxuICAgICAgICB9XG4gICAgICAgIGlmIChhc3NlcnRDYWNoZS5oYXNPd25Qcm9wZXJ0eShjbGFzc05hbWUpKSB7XG4gICAgICAgICAgcmV0dXJuXG4gICAgICAgIH1cbiAgICAgICAgaWYgKC9eYXAvLnRlc3QoY2xhc3NOYW1lKSkge1xuICAgICAgICAgIHJldHVyblxuICAgICAgICB9XG4gICAgICAgIGxldCB2YWxpZCA9IEFwSWNvbi5oYXNTdHlsZVdpdGhDbGFzcyhjbGFzc05hbWUpXG4gICAgICAgIGlmICghdmFsaWQpIHtcbiAgICAgICAgICBub3Rmb3VuZENhY2hlLnB1c2goY2xhc3NOYW1lKVxuICAgICAgICB9XG4gICAgICAgIGFzc2VydENhY2hlWyBjbGFzc05hbWUgXSA9IHZhbGlkXG4gICAgICB9KVxuICAgICAgQXBJY29uLndhcm5Ob3RGb3VuZCgpXG4gICAgfSwgb3B0aW9ucy5kZWxheSB8fCBBU1NFUlRfREVMQVkpXG4gIH0sXG5cbiAgLy8gLS0tLS0tLS0tLS0tLS0tLS0tXG4gIC8vIFByaXZhdGVcbiAgLy8gLS0tLS0tLS0tLS0tLS0tLS0tXG5cbiAgX2Fzc2VydFRpbWVyOiAtMVxufSlcblxuZXhwb3J0IGRlZmF1bHQgQXBJY29uXG4iXX0=